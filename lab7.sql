/*
James Liang
Lab 7
*/

--1.
SELECT c.COURSE_NO, c.DESCRIPTION, NVL(r.REVENUE, 0) AS "Total Revenue per Course"
FROM STUDENT.COURSE c
LEFT OUTER JOIN STUDENT.COURSE_REVENUE r ON r.COURSE_NO = c.COURSE_NO
ORDER BY NVL(r.REVENUE, 0) ASC;

--2.
SELECT c.COURSE_NO, c.DESCRIPTION, NVL(r.REVENUE, 0) AS "Total Revenue per Course"
FROM STUDENT.COURSE_REVENUE r
RIGHT OUTER JOIN STUDENT.COURSE c ON c.COURSE_NO = r.COURSE_NO
ORDER BY NVL(r.REVENUE, 0) ASC;

--3.
SELECT c.COURSE_NO, c.DESCRIPTION, r.REVENUE
FROM STUDENT.COURSE_REVENUE r
RIGHT OUTER JOIN STUDENT.COURSE c ON c.COURSE_NO = r.COURSE_NO
WHERE r.REVENUE IS NOT NULL
ORDER BY r.REVENUE DESC;

--4.
SELECT i.INSTRUCTOR_ID AS "Instructors Not Teaching"
FROM STUDENT.INSTRUCTOR i MINUS
SELECT n.INSTRUCTOR_ID
FROM STUDENT.SECTION n
JOIN STUDENT.INSTRUCTOR i ON i.INSTRUCTOR_ID=n.INSTRUCTOR_ID
ORDER BY "Instructors Not Teaching" DESC;

--5.
SELECT DESCRIPTION, COST, PREREQUISITE
FROM STUDENT.COURSE
WHERE DESCRIPTION LIKE '%s' AND COST > 1100 AND PREREQUISITE BETWEEN 25 AND 80;

--6.
SELECT COST, COUNT(*) AS "Total Courses"
FROM STUDENT.COURSE
GROUP BY COST
ORDER BY "Total Courses" DESC;

--7.
SELECT COURSE_NO, DESCRIPTION
FROM STUDENT.COURSE
WHERE LENGTH(DESCRIPTION) >= 10 AND LENGTH(DESCRIPTION) < 16;

--8.
SELECT TO_CHAR(SYSDATE, 'mm/dd/yyyy') AS "Formatted Today's Date"
FROM DUAL;

--9.
SELECT TO_CHAR(SYSDATE, 'DD-MON-YYYY HH:MI:SS') AS "Formatted Today's Date"
FROM DUAL;

--10.
SELECT TO_CHAR(SYSDATE, 'Dy FMMonth DD, YYYY') AS "Formatted Today's Date"
FROM DUAL;

--11.
SELECT MAX(COST) AS "Highest Cost"
FROM STUDENT.COURSE;

--12.
SELECT TO_CHAR(MAX(COST),'$999,999') AS "Highest Cost"
FROM STUDENT.COURSE;

--13.
SELECT MIN(SALARY) AS "Minimum", MAX(SALARY) AS "Maximum", AVG(SALARY) AS "Average", MEDIAN(SALARY) AS "Median"
FROM STUDENT.EMPLOYEE;

--14.
SELECT MIN(SALARY) + MAX(SALARY) AS "Min plus Max"
FROM STUDENT.EMPLOYEE;

--15.
SELECT EMPLOYEE_ID, NAME, TITLE
FROM STUDENT.EMPLOYEE
WHERE TITLE IN('Manager', 'Analyst')
ORDER BY EMPLOYEE_ID DESC;

--16.
SELECT LAST_NAME FROM STUDENT.STUDENT
WHERE SOUNDEX(LAST_NAME) = SOUNDEX('Archer')
ORDER BY LAST_NAME ASC;

--17.
SELECT EMPLOYER, COUNT(*) AS "Number of Students Employed by"
FROM STUDENT.STUDENT
GROUP BY EMPLOYER
ORDER BY "Number of Students Employed by" DESC;

--18.
SELECT EMPLOYER, COUNT(*) AS "Number of Students Employed by"
FROM STUDENT.STUDENT
GROUP BY EMPLOYER
HAVING COUNT(*) >= 7
ORDER BY "Number of Students Employed by" DESC;

--19.
SELECT STUDENT_ID, LAST_NAME || ', ' || FIRST_NAME AS "Last, First"
FROM STUDENT.STUDENT
ORDER BY STUDENT_ID ASC
FETCH FIRST 10 ROWS ONLY;

--20.
SELECT MIDTERM_GRADE, FINALEXAM_GRADE, QUIZ_GRADE, NVL(COALESCE(MIDTERM_GRADE, FINALEXAM_GRADE, QUIZ_GRADE),0) "Default of 0"
FROM STUDENT.GRADE_SUMMARY;
